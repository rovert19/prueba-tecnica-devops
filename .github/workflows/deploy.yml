name: Build and deploy

on:
  push:
    branches: [main]

env:
    APP_FOLDER: web-page-deploy-devops
    AWS_REGION: us-east-1
    S3_BUCKET: s3://web-devops-bucket

jobs:
  build:
    name: Build react-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
            
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.x'
      
      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: web-page-deploy-devops/src
          args: >
            -Dsonar.organization=rovert19
            -Dsonar.projectKey=rovert19_prueba-tecnica-devops
            -Dsonar.verbose=true

      - name: Check Quality Status
        id: check-quality-status
        uses: rovert19/sonarcloud-quality-check@v0.1
        with:
          sonar-project-key: rovert19_prueba-tecnica-devops
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          branch: main
      
      - name: Quality Status Result
        run: |
          echo "${{ steps.check-quality-status.outputs.project-status }}"

      - name: Compile react-app
        working-directory: ${{ env.APP_FOLDER }}
        run: npm ci && npm run build 
    
      - name: Upload artifact to S3
        working-directory: ${{ env.APP_FOLDER }}
        run: aws s3 sync --delete ./dist ${{ env.S3_BUCKET }}/dist
    
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }} 

      - name: Create deployment
        id: create-deployment
        run: |
          COMMIT_HASH=`git rev-parse HEAD`
          DEPLOYMENT_ID=`aws deploy create-deployment --application-name simple-react-app \
                      --deployment-group-name GISimpleReactApp \
                      --github-location repository=$GITHUB_REPOSITORY,commitId=$COMMIT_HASH --query deploymentId --output text`
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
      
      - name: Deployment status
        run: |
          while true;
          do
              STATUS=`aws deploy get-deployment --deployment-id ${{ steps.create-deployment.outputs.DEPLOYMENT_ID }} --query "deploymentInfo.[status]" --output text`
              echo "Current status: $STATUS"

              if [ "$STATUS" == "Succeeded" ]; then
                  echo "Successful deployment"
                  exit 0
              fi
              if [ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]; then
                  echo "Failed deployment"
                  exit 1
              fi
              sleep 10
          done
